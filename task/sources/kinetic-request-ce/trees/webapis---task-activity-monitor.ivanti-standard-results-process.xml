<tree schema_version="1.0">
    <sourceName>Kinetic Request CE</sourceName>
    <sourceGroup>WebApis > task-activity-monitor</sourceGroup>
    <type>Tree</type>
    <status>Active</status>
    <taskTree builder_version="" schema_version="1.0" version="">
        <name>ivanti-standard-results-process</name>
        <author></author>
        <notes></notes>
        <lastID>52</lastID>
        <request>
            <task definition_id="system_start_v1" id="start" name="Start" x="10" y="10">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters></parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">kinetic_request_ce_submission_activity_create_v1_35</task>
                </dependents>
            </task>
            <task definition_id="utilities_create_trigger_v1" id="utilities_create_trigger_v1_1" name="Send Complete Trigger" x="754" y="392">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="action_type" label="Action Type" menu="Update,Complete" required="true" tooltip="">Complete</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="deferral_token" label="Deferral Token" menu="" required="true" tooltip="">&lt;%=
JSON.parse(@request['body'])['Deferral Token']
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="deferred_variables" label="Deferred Results" menu="" required="false" tooltip=""></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="message" label="Message" menu="" required="false" tooltip=""></parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">system_noop_v1_18</task>
                </dependents>
            </task>
            <task definition_id="kinetic_request_ce_submission_get_answers_v1" id="kinetic_request_ce_submission_get_answers_v1_5" name="Get Task Activity Monitoring Values" x="522" y="181">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Raise Error</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="space_slug" label="Space Slug" menu="" required="false" tooltip="The Space the submission is being retrieved from."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="submission_id" label="Submission ID" menu="" required="true" tooltip="The id of the submission to retrieve answers for.">&lt;%=JSON.parse(@request['body'])['Task Activity Monitor Submission']%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">routine_onsolve_mir3_get_integration_report_results_22</task>
                </dependents>
            </task>
            <task definition_id="system_noop_v1" id="system_noop_v1_18" name="End" x="754" y="533">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters></parameters>
                <messages></messages>
                <dependents></dependents>
            </task>
            <task definition_id="routine_onsolve_mir3_get_integration_report_results" id="routine_onsolve_mir3_get_integration_report_results_22" name="Get Integration Report Results" x="753" y="179">
                <version>1</version>
                <configured>true</configured>
                <defers>true</defers>
                <deferrable>true</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="UUID" label="UUID" menu="" required="true" tooltip="The UUID for the MIR3 Notification">&lt;%=@results['Get Task Activity Monitoring Values']['Onsolve Id']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Timestamp" label="Timestamp" menu="" required="true" tooltip="The point after which to return contact attempts and responses from the report">&lt;%=
last_activity_time = @results['Get Task Activity Monitoring Record']['Created At']

if @results['Get Task Activity Monitoring Values'].has_key? ('Onsolve Last Activity Time')
  if !@results['Get Task Activity Monitoring Values']['Onsolve Last Activity Time'].nil?
    last_activity_time = @results['Get Task Activity Monitoring Values']['Onsolve Last Activity Time']
  end
end

Time.parse(last_activity_time).strftime("%Y-%m-%d %H:%M:%S")
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Timezone" label="Timezone" menu="" required="true" tooltip="Timezone to be used for building display lines that include textual timestamps. Options are CST, EST, PST, UTC, or USER">&lt;%=
timezone = "UTC"

integration_config = JSON.parse(@request['body'])['Integration Configuration']
std_params = JSON.parse(integration_config['Result Standard Action Parameters'] || "{}")

if ["CST","EST","PST","UTC","USER"].include? (std_params['Timezone'])
  timezone = std_params['Timezone']
end

timezone
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Responses Used" label="Responses Used" menu="" required="true" tooltip="0 = Do not included responses in results, 1 = Include responses">&lt;%=
responses_used = "1"

integration_config = JSON.parse(@request['body'])['Integration Configuration']
std_params = JSON.parse(integration_config['Result Standard Action Parameters'] || "{}")

if ["0","1"].include? (std_params['Responses Used'])
  responses_used = std_params['Responses Used']
end

responses_used
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Success Responder Type" label="Success Responder Type" menu="" required="true" tooltip="0 = Not needed, 1 = First and Last Name, 2 = Employee ID,  3 = User Name, 4 = Primary Key">&lt;%=
success_responder = "2"

integration_config = JSON.parse(@request['body'])['Integration Configuration']
std_params = JSON.parse(integration_config['Result Standard Action Parameters'] || "{}")

if ["0","1","2","3","4"].include? (std_params['Success Responder Type'])
  success_responder = std_params['Success Responder Type']
end

success_responder
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Primary Key Field" label="Primary Key Field" menu="" required="false" tooltip="Required only if using Success Responder Type = 4, otherwise not used">&lt;%=
integration_config = JSON.parse(@request['body'])['Integration Configuration']
std_params = JSON.parse(integration_config['Result Standard Action Parameters'] || "{}")

primary_key = std_params['Primary Key'] if !std_params['Primary Key'].nil?

primary_key
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Detail Level" label="Detail Level" menu="" required="true" tooltip="1 = Contact attemptes, responses, and counts, 2 = Responses and counts, 3 = Only 'Success' responses and counts, 4 = Counts only">&lt;%=
detail_level = "1"

integration_config = JSON.parse(@request['body'])['Integration Configuration']
std_params = JSON.parse(integration_config['Result Standard Action Parameters'] || "{}")

if ["1","2","3","4"].include? (std_params['Detail Level'])
  detail_level = std_params['Detail Level']
end

detail_level
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Report Name" label="Report Name" menu="" required="true" tooltip="">&lt;%=
report_name = "Integration Results"

integration_config = JSON.parse(@request['body'])['Integration Configuration']
std_params = JSON.parse(integration_config['Result Standard Action Parameters'] || "{}")

report_name = std_params['Report Name'] if !std_params['Report Name'].nil?

report_name
%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">utilities_create_trigger_v1_1</task>
                    <task label="Unsuccessful" type="Complete" value="@results['Get Integration Report Results']['Success'] != &quot;true&quot;">routine_onsolve_error_v1_37</task>
                    <task label="Unsuccessful" type="Complete" value="@results['Get Integration Report Results']['Success'] != &quot;true&quot;">utilities_echo_v1_39</task>
                    <task label="Successful" type="Complete" value="@results['Get Integration Report Results']['Success'] == &quot;true&quot;">utilities_echo_v1_26</task>
                </dependents>
            </task>
            <task definition_id="kinetic_request_ce_submission_retrieve_v2" id="kinetic_request_ce_submission_retrieve_v2_23" name="Get Task Activity Monitoring Record" x="289" y="179">
                <version>2</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Raise Error</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="space_slug" label="Space Slug" menu="" required="false" tooltip="The Space the submission is being retrieved from (defaults to info value if not provided)."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="retrieve_by" label="Retrieve By" menu="Id,Query" required="true" tooltip="How to retrieve the submission. Id or Query.">Id</parameter>
                    <parameter dependsOnId="retrieve_by" dependsOnValue="Query" id="kapp_slug" label="Kapp Slug" menu="" required="true" tooltip="Slug of the kapp to query"></parameter>
                    <parameter dependsOnId="retrieve_by" dependsOnValue="Query" id="form_slug" label="Form Slug" menu="" required="true" tooltip="Slug of the form to query"></parameter>
                    <parameter dependsOnId="retrieve_by" dependsOnValue="Query" id="query" label="Query" menu="" required="true" tooltip="A query that will retrieve a single submission"></parameter>
                    <parameter dependsOnId="retrieve_by" dependsOnValue="Id" id="submission_id" label="Submission Id" menu="" required="true" tooltip="The id of the submission being retrieved.">&lt;%=JSON.parse(@request['body'])['Task Activity Monitor Submission']%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">kinetic_request_ce_submission_get_answers_v1_5</task>
                </dependents>
            </task>
            <task definition_id="utilities_echo_v1" id="utilities_echo_v1_26" name="Assignment Logic" x="1134" y="182">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="input" label="Input" menu="" required="true" tooltip="">&lt;%=

integration_config = JSON.parse( @request['body'] )['Integration Configuration']
result_action_parameters = JSON.parse( integration_config['Result Standard Action Parameters'] )
successResponderType = result_action_parameters['Success Responder Type']

report_output = JSON.parse(@results['Get Integration Report Results']['Output'])
report_result = report_output['execute_custom_report_response']['report_detail']
headers = report_result['header']['column_name']
rows = report_result['row'] if report_result['row'].is_a? (Array)
rows = [report_result['row']] if report_result['row'].is_a? (Hash)

display_line_assignee = headers.find_index('ASSIGNEE')
display_line_assignee_name = headers.find_index('ASSIGNEENAME')
display_line_assignee_response = headers.find_index('ASSIGNEERESPONSE')
display_line_responder_primary_key = headers.find_index('RESPONDERPRIMARYKEY')
display_line_assignee_response_time = headers.find_index('ASSIGNEERESPONSETIME')
display_line_status = headers.find_index('STATUS')

## if zero, we don't want to assign
## if 1, 2, 3, 4 we need to report the value
## output like {"responderType":"0","responderValue":"abcd"}
## we'll use the output in following nodes to determine what to do.

if successResponderType == "4"
  assignee = rows.first['value'][display_line_responder_primary_key]
else
  assignee = rows.first['value'][display_line_assignee]
end
notification_status = rows.first['value'][display_line_status]
assignee_name = rows.first['value'][display_line_assignee_name]
assignee_response = rows.first['value'][display_line_assignee_response]
assignee_response_time = rows.first['value'][display_line_assignee_response_time]

output = {
  "notificationStatus" =&gt; notification_status,
  "responderType" =&gt; successResponderType, 
  "responderValue" =&gt; assignee, 
  "responderName" =&gt; assignee_name,
  "responderResponse" =&gt; assignee_response,
  "responderResponseTime" =&gt; assignee_response_time
}.to_json
%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="No Assignment" type="Complete" value="integration_config = JSON.parse( @request['body'] )['Integration Configuration']&#10;integration_config['Assign Responder'] != &quot;Yes&quot; || ( JSON.parse( @results['Assignment Logic']['output'] )['notificationStatus'] != &quot;RESPONDED&quot; || JSON.parse( @results['Assignment Logic']['output'] )['responderType'].nil? || JSON.parse( @results['Assignment Logic']['output'] )['responderType'] == &quot;0&quot; )">system_junction_v1_28</task>
                    <task label="Expects Assignment" type="Complete" value="integration_config = JSON.parse( @request['body'] )['Integration Configuration']&#10;integration_config['Assign Responder'] == &quot;Yes&quot; &amp;&amp; ( JSON.parse( @results['Assignment Logic']['output'] )['notificationStatus'] == &quot;RESPONDED&quot; &amp;&amp; !JSON.parse( @results['Assignment Logic']['output'] )['responderType'].nil? &amp;&amp; JSON.parse( @results['Assignment Logic']['output'] )['responderType'] != &quot;0&quot; )">routine_onsolve_ivanti_data_search_v1_52</task>
                </dependents>
            </task>
            <task definition_id="system_junction_v1" id="system_junction_v1_28" name="Junction 2" x="1463.0607" y="186.9775">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters></parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">utilities_echo_v1_31</task>
                </dependents>
            </task>
            <task definition_id="utilities_echo_v1" id="utilities_echo_v1_31" name="Assemble Work Note" x="1750.0907" y="172.97311">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="input" label="Input" menu="" required="true" tooltip="">&lt;%=
integration_config = JSON.parse( @request['body'] )['Integration Configuration']
notification_method_options = {"calloutInfo" =&gt; "Callout", "broadcastInfo" =&gt; "Broadcast", "bulletinBoardInfo" =&gt; "Bulletin Board", "firstResponseInfo" =&gt; "First Response"}
notification_method = notification_method_options[integration_config['Notification Method']]
assignment_logic_output = JSON.parse( @results['Assignment Logic']['output'] )
report_output = JSON.parse(@results['Get Integration Report Results']['Output'])
report_result = report_output['execute_custom_report_response']['report_detail']
headers = report_result['header']['column_name']
rows = report_result['row'] if report_result['row'].is_a? (Array)
rows = [report_result['row']] if report_result['row'].is_a? (Hash)

assignment_status = nil
if assignment_logic_output['notificationStatus'] == "RESPONDED" &amp;&amp; !['Broadcast','Bulletin Board'].include?(notification_method)
  if integration_config['Assign Responder'] == "Yes"
    if @results['Get Ivanti User'] &amp;&amp; @results['Get Ivanti User']['JSON Results'] != "null" &amp;&amp; !JSON.parse( @results['Get Ivanti User']['JSON Results'] || "{}" ).empty?
        # If successfully assigned
        if @results.has_key?('Assign Ivanti') &amp;&amp; @results['Assign Ivanti']['Handler Error Message'].to_s.empty?
          # Assignment successful
          assignment_status = "completed and assigned #{assignment_logic_output['responderName']} as the responder accepting the issue with the response: #{assignment_logic_output['responderResponse']}."
        else
          # Assignment unsuccessful
          assignment_status = "completed and #{assignment_logic_output['responderName']} accepted the issue with the response: #{assignment_logic_output['responderResponse']} - HOWEVER, assignment to that Ivanti user was unsuccessful."
        end
      else
        assignment_status = "completed and #{assignment_logic_output['responderName']} accepted the issue with the response: #{assignment_logic_output['responderResponse']} - HOWEVER, assignment to that Ivanti user was unsuccessful."
      end
  else
    assignment_status = "completed and #{assignment_logic_output['responderName']} accepted the issue with the response: #{assignment_logic_output['responderResponse']}."
  end
elsif assignment_logic_output['notificationStatus'] == "RESPONDED"
  assignment_status = "completed."
elsif assignment_logic_output['notificationStatus'] == "TERMINATED"
  assignment_status = "was manually cancelled by an administrator."
elsif assignment_logic_output['notificationStatus'] == "TIME_OUT" &amp;&amp; !['Broadcast','Bulletin Board'].include?(notification_method)
  assignment_status = "completed but no responder was identified."
elsif assignment_logic_output['notificationStatus'] == "TIME_OUT"
  assignment_status = "completed."
else
  assignment_status = "completed."
end

work_note_text = "#{notification_method} Notification \"#{@results['Get Task Activity Monitoring Values']['OnSolve Notification Title']}\" (UUID: #{@results['Get Task Activity Monitoring Values']['Onsolve Id']})"
work_note_text += " #{assignment_status}" if !assignment_status.nil?

if ["Standard Reporting","Custom Action"].include?( integration_config['Notification Result Action'] )
  work_note_text += "  Status update through completion:" if (!assignment_status.nil? &amp;&amp; assignment_logic_output['notificationStatus'] != "TERMINATED")
  work_note_text += "  Status update through termination:" if (!assignment_status.nil? &amp;&amp; assignment_logic_output['notificationStatus'] == "TERMINATED")
  display_line_index = headers.find_index('DISPLAYLINE');
  rows.each{|row|
    work_note_text += "\n#{row['value'][display_line_index]}"
  }
end

work_note_text
%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">kinetic_request_ce_submission_activity_update_v1_36</task>
                </dependents>
            </task>
            <task definition_id="kinetic_request_ce_submission_activity_create_v1" id="kinetic_request_ce_submission_activity_create_v1_35" name="Add Submission Activity" x="63" y="182">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Raise Error</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="space_slug" label="Space Slug" menu="" required="false" tooltip="The Space the submission exists in (defaults to info value if not provided)."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="submission_id" label="Submission Id" menu="" required="true" tooltip="The id of the submission for which the activity is being created for.">&lt;%=JSON.parse(@request['body'])['Task Activity Monitor Submission']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="label" label="Label" menu="" required="false" tooltip="The label for the submission activity.">MIR3 Notification Completed</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="description" label="Description" menu="" required="false" tooltip="The description of the submission activity.">Source Name: &lt;%=@source['Name']%&gt;
Source Group: &lt;%=@source['Group']%&gt;
Source Id: &lt;%=@source['Id']%&gt;
Run Id: &lt;%=@run['Id']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="type" label="Type" menu="" required="false" tooltip="Specifies the a submission activity 'Type', which should indicate what type of data is included.">Notification Completed</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="data" label="Data" menu="" required="false" tooltip="Additional data that can be used by resources consuming the submission activity record (for example a Request bundle may render submission details based upon JSON content in the activity data).">&lt;%=
{
  "Task Run Id" =&gt; @run['Id'],
  "Status" =&gt; "In Process"
}.to_json
%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">kinetic_request_ce_submission_retrieve_v2_23</task>
                </dependents>
            </task>
            <task definition_id="kinetic_request_ce_submission_activity_update_v1" id="kinetic_request_ce_submission_activity_update_v1_36" name="Update Submission Activity" x="2028.2639" y="172.87367">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Raise Error</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="space_slug" label="Space Slug" menu="" required="false" tooltip="The Space the submission exists in (defaults to info value if not provided)."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="submission_id" label="Submission Id" menu="" required="true" tooltip="The id of the submission for which the activity is being created for.">&lt;%=JSON.parse(@request['body'])['Task Activity Monitor Submission']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="submission_activity_id" label="Submission Activity Id" menu="" required="true" tooltip="The id of the submission for which the activity is being created for.">&lt;%=@results['Add Submission Activity']['Id']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="label" label="Label" menu="" required="false" tooltip="The label for the submission activity.">MIR3 Notification Completed</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="description" label="Description" menu="" required="false" tooltip="The description of the submission activity.">Source Name: &lt;%=@source['Name']%&gt;
Source Group: &lt;%=@source['Group']%&gt;
Source Id: &lt;%=@source['Id']%&gt;
Run Id: &lt;%=@run['Id']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="type" label="Type" menu="" required="false" tooltip="Specifies the a submission activity 'Type', which should indicate what type of data is included.">Notification Completed</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="data" label="Data" menu="" required="false" tooltip="Additional data that can be used by resources consuming the submission activity record (for example a Request bundle may render submission details based upon JSON content in the activity data).">&lt;%=
{
  "Task Run Id" =&gt; @run['Id'],
  "Status" =&gt; "Completed",
  "Comments" =&gt; "Alert Results: #{@results['Assemble Work Note']['output']}",
  "WebAPI Name" =&gt; JSON.parse( @request['Body'] )['WebAPI Name']
}.to_json
%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="If result config" type="Complete" value="JSON.parse( @request['body'] )['Integration Configuration']['Notification Result Action'] != &quot;None&quot;">routine_kinetic_submission_create_v1_49</task>
                </dependents>
            </task>
            <task definition_id="routine_onsolve_error_v1" id="routine_onsolve_error_v1_37" name="OnSolve Error Notification" x="751" y="51">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>true</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="Error Message Title" label="Error Message Title" menu="" required="true" tooltip="The title of the error message to be send with the error notification">&lt;%=
integration_config = JSON.parse( @request['body'] )['Integration Configuration']
client_reference = @results['Get Task Activity Monitoring Values']['Source Reference Id']
uuid = @results['Get Task Activity Monitoring Values']['Onsolve Id']

"Unable to retrieve 'Integration Results' report from MIR3 for UUID: #{uuid} (Integration Name: #{integration_config['Name']}, client reference: #{client_reference})"
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Error Message Details" label="Error Message Details" menu="" required="true" tooltip="The error message details to be sent with the error notification">&lt;%=
results = JSON.parse(@results['Get Integration Report Results']['Output'])
comments = ""
results['error'].each{|key,value|
  comments &lt;&lt; "\n#{key}: #{value}"
}
comments
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Integration Id" label="Integration Id" menu="" required="false" tooltip="The Submission Id of the integration configuration record"></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Submission Id" label="Submission Id" menu="" required="false" tooltip="The Submission Id of the Task Activity Monitor record">&lt;%=JSON.parse(@request['body'])['Task Activity Monitor Submission']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Recipient List" label="Recipient List" menu="" required="false" tooltip="The receipient list to receive the notification">&lt;%=JSON.parse( @request['body'] )['Integration Configuration']['Error Notification Email']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Task Run" label="Task Run" menu="" required="false" tooltip="">&lt;%=@run['Id']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Additional Info" label="Additional Info" menu="" required="false" tooltip="">&lt;%=
{
  "WebAPI Name" =&gt; JSON.parse( @request['Body'] )['WebAPI Name']
}.to_json
%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents></dependents>
            </task>
            <task definition_id="utilities_echo_v1" id="utilities_echo_v1_39" name="Assemble Work Note - Error" x="1130.0088" y="50">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="input" label="Input" menu="" required="true" tooltip="">&lt;%=
integration_config = JSON.parse( @request['body'] )['Integration Configuration']
notification_method_options = {"calloutInfo" =&gt; "Callout", "broadcastInfo" =&gt; "Broadcast", "bulletinBoardInfo" =&gt; "Bulletin Board", "firstResponseInfo" =&gt; "First Response"}
notification_method = notification_method_options[integration_config['Notification Method']]
client_reference = @results['Get Task Activity Monitoring Values']['Source Reference Id']
uuid = @results['Get Task Activity Monitoring Values']['Onsolve Id']

work_notes = ["#{notification_method} Notification \"#{@results['Get Task Activity Monitoring Values']['OnSolve Notification Title']}\" (UUID: #{@results['Get Task Activity Monitoring Values']['Onsolve Id']}) completed, however Kinetic was unable to retrieve the details. Error Message (if applicable):"]

results = JSON.parse(@results['Get Integration Report Results']['Output'])
results['error'].each{|key,value|
  work_notes.push( "#{key}: #{value}" )
}

work_notes.join("\n")
%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">kinetic_request_ce_submission_activity_update_v1_40</task>
                </dependents>
            </task>
            <task definition_id="kinetic_request_ce_submission_activity_update_v1" id="kinetic_request_ce_submission_activity_update_v1_40" name="Update Submission Activity - Error" x="2027.3684" y="49.999374">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Raise Error</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="space_slug" label="Space Slug" menu="" required="false" tooltip="The Space the submission exists in (defaults to info value if not provided)."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="submission_id" label="Submission Id" menu="" required="true" tooltip="The id of the submission for which the activity is being created for.">&lt;%=JSON.parse(@request['body'])['Task Activity Monitor Submission']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="submission_activity_id" label="Submission Activity Id" menu="" required="true" tooltip="The id of the submission for which the activity is being created for.">&lt;%=@results['Add Submission Activity']['Id']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="label" label="Label" menu="" required="false" tooltip="The label for the submission activity.">MIR3 Notification Completed</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="description" label="Description" menu="" required="false" tooltip="The description of the submission activity.">Source Name: &lt;%=@source['Name']%&gt;
Source Group: &lt;%=@source['Group']%&gt;
Source Id: &lt;%=@source['Id']%&gt;
Run Id: &lt;%=@run['Id']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="type" label="Type" menu="" required="false" tooltip="Specifies the a submission activity 'Type', which should indicate what type of data is included.">Notification Completed</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="data" label="Data" menu="" required="false" tooltip="Additional data that can be used by resources consuming the submission activity record (for example a Request bundle may render submission details based upon JSON content in the activity data).">&lt;%=
{
  "Task Run Id" =&gt; @run['Id'],
  "Status" =&gt; "Completed",
  "Comments" =&gt; "Alert Results: #{@results['Assemble Work Note - Error']['output']}",
  "WebAPI Name" =&gt; JSON.parse( @request['Body'] )['WebAPI Name']
}.to_json
%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="If result config" type="Complete" value="JSON.parse( @request['body'] )['Integration Configuration']['Notification Result Action'] != &quot;None&quot;">routine_kinetic_submission_create_v1_48</task>
                </dependents>
            </task>
            <task definition_id="routine_kinetic_submission_create_v1" id="routine_kinetic_submission_create_v1_48" name="Outbound Activity - Add Ivanti Journal Entry - Error" x="2384.3916" y="45.99875">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>true</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="Kapp Slug" label="Kapp Slug" menu="" required="true" tooltip="The slug of the Kapp to create the submission in">task-activity-monitor</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Form Slug" label="Form Slug" menu="" required="true" tooltip="The slug of the Form to create the submission in">outbound-activity</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Current Page Name" label="Current Page Name" menu="" required="false" tooltip="The page to set the submission to"></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Current Page Navigation" label="Current Page Navigation" menu="" required="false" tooltip="The direction of the next page (next or previous)"></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Values JSON" label="Values JSON" menu="" required="false" tooltip="A JSON Map of values to set into the submissions fields">&lt;%=
integration_config = JSON.parse( @request['body'] )['Integration Configuration']
parameters = JSON.parse(integration_config['Result Standard Action Parameters'])
source_data = JSON.parse( @results['Get Task Activity Monitoring Values']['Source Data'] )
source_id = @results['Get Task Activity Monitoring Values']['Source Id']
source_type_id = integration_config['Schema Type Id']
journal_type_id = parameters['Journal Object Type Id']

{
  "Status" =&gt; "New",
  "Source" =&gt; "Ivanti",
  "Source Id" =&gt; @results['Get Task Activity Monitoring Values']['Source Id'],
  "Source Reference Id" =&gt;  @results['Get Task Activity Monitoring Values']['Source Reference Id'],
  "UUID" =&gt; @results['Get Task Activity Monitoring Values']['Onsolve Id'],
  "Task Activity Monitor Record" =&gt; JSON.parse(@request['body'])['Task Activity Monitor Submission'],
  "Related Activity Record" =&gt; @results['Add Submission Activity']['Id'],
  "Action" =&gt; "Update",
  "Payload" =&gt; {
    "schema_name" =&gt; integration_config['Schema Name']
    "object_json" =&gt; { 
      "PageDetails":"Kinetic Error Testing 123Failed"
    }.to_json
  }.to_json
}.to_json
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Origin Id" label="Origin Id" menu="" required="false" tooltip="Sets the submissions origin to another Kinetic Submission">&lt;%=JSON.parse(@request['body'])['Task Activity Monitor Submission']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Parent Id" label="Parent Id" menu="" required="false" tooltip="Sets the submissions parent to another Kinetic Submission">&lt;%=JSON.parse(@request['body'])['Task Activity Monitor Submission']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Submit Submission" label="Submit Submission" menu="" required="false" tooltip="True or False, if Submission should be Submitted when created">True</parameter>
                </parameters>
                <messages></messages>
                <dependents></dependents>
            </task>
            <task definition_id="routine_kinetic_submission_create_v1" id="routine_kinetic_submission_create_v1_49" name="Outbound Activity - Add Ivanti Journal Entry" x="2387.4878" y="168.77924">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>true</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="Kapp Slug" label="Kapp Slug" menu="" required="true" tooltip="The slug of the Kapp to create the submission in">task-activity-monitor</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Form Slug" label="Form Slug" menu="" required="true" tooltip="The slug of the Form to create the submission in">outbound-activity</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Current Page Name" label="Current Page Name" menu="" required="false" tooltip="The page to set the submission to"></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Current Page Navigation" label="Current Page Navigation" menu="" required="false" tooltip="The direction of the next page (next or previous)"></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Values JSON" label="Values JSON" menu="" required="false" tooltip="A JSON Map of values to set into the submissions fields">&lt;%=
integration_config = JSON.parse( @request['body'] )['Integration Configuration']
parameters = JSON.parse(integration_config['Result Standard Action Parameters'])
source_data = JSON.parse( @results['Get Task Activity Monitoring Values']['Source Data'] )
source_id = @results['Get Task Activity Monitoring Values']['Source Id']
source_type_id = integration_config['Schema Type Id']
journal_type_id = parameters['Journal Object Type Id']
assignment_logic_output = JSON.parse( @results['Assignment Logic']['output'] )
# special workflow for Adventist  See payload below as well
if assignment_logic_output['responderValue'].nil?
  responder_value = "UNKNOWN"
else
  if assignment_logic_output['responderValue'].include? "@"
    responder_value = assignment_logic_output['responderValue'][0..assignment_logic_output['responderValue'].index('@')-1]
  else
    responder_value = assignment_logic_output['responderValue']
  end
end
page_status="Notified"
if assignment_logic_output['notificationStatus'] == "TERMINATED" || assignment_logic_output['notificationStatus'] == "TIME_OUT"
  page_status = "TimedOut"
  dynamic_object_json = '"PageStatus": #{page_status},"Status":"Completed"'  
else
  dynamic_object_json = '"PageStatus": #{page_status},"Status":"Completed","AcknowledgedBy": #{responder_value},"AcknowledgedOn": #{Time.now().iso8601}'
end


{
  "Status" =&gt; "New",
  "Source" =&gt; "Ivanti",
  "Source Id" =&gt; @results['Get Task Activity Monitoring Values']['Source Id'],
  "Source Reference Id" =&gt;  @results['Get Task Activity Monitoring Values']['Source Reference Id'],
  "UUID" =&gt; @results['Get Task Activity Monitoring Values']['Onsolve Id'],
  "Task Activity Monitor Record" =&gt; JSON.parse(@request['body'])['Task Activity Monitor Submission'],
  "Related Activity Record" =&gt; @results['Add Submission Activity']['Id'],
  "Action" =&gt; "Update",
 "Payload" =&gt; {
    "schema_name" =&gt; integration_config['Schema Name'],
    "object_json" =&gt; { 
      "PageStatus": page_status,
      "Status":"Completed",
      "AcknowledgedBy": responder_value,
      "AcknowledgedOn": Time.now().iso8601
    }.to_json
  }.to_json
}.to_json
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Origin Id" label="Origin Id" menu="" required="false" tooltip="Sets the submissions origin to another Kinetic Submission">&lt;%=JSON.parse(@request['body'])['Task Activity Monitor Submission']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Parent Id" label="Parent Id" menu="" required="false" tooltip="Sets the submissions parent to another Kinetic Submission">&lt;%=JSON.parse(@request['body'])['Task Activity Monitor Submission']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Submit Submission" label="Submit Submission" menu="" required="false" tooltip="True or False, if Submission should be Submitted when created">True</parameter>
                </parameters>
                <messages></messages>
                <dependents></dependents>
            </task>
            <task definition_id="routine_onsolve_ivanti_object_update" id="routine_onsolve_ivanti_object_update_51" name="Assign Ivanti" x="1462.055" y="380.99625">
                <version>1</version>
                <configured>true</configured>
                <defers>true</defers>
                <deferrable>true</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="Object Name" label="Object Name" menu="" required="true" tooltip="Readable name of the Object to be update (e.g., Incidents)">&lt;%=
integration_config = JSON.parse( @request['body'] )['Integration Configuration']
integration_config['Schema Name']
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Object Id" label="Object Id" menu="" required="true" tooltip="Id of the object to be updated">&lt;%=@results['Get Task Activity Monitoring Values']['Source Reference Id']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Object JSON" label="Object JSON" menu="" required="true" tooltip="A JSON representation of the field names/values for the fields that should be updated">&lt;%=

assignment_value = nil
fields = JSON.parse( @results['Get Ivanti User']['JSON Results'] )

# results were limited to a single value, but it should be returned by an arry
if fields.is_a? Array
  fields.each{|field|
    if field['name'] == "RecID"
      assignment_value = field['value']
    end
  }
else
  assignment_value = fields['RecID']
end

{
  "Owned By ID" =&gt; assignment_value
}.to_json
%&gt;

</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">system_junction_v1_28</task>
                </dependents>
            </task>
            <task definition_id="routine_onsolve_ivanti_data_search_v1" id="routine_onsolve_ivanti_data_search_v1_52" name="Get Ivanti User" x="1133.0018" y="388">
                <version>1</version>
                <configured>true</configured>
                <defers>true</defers>
                <deferrable>true</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="Object Name" label="Object Name" menu="" required="true" tooltip="">employees</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Fields To Return" label="Fields To Return" menu="" required="false" tooltip=""></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Filters" label="Filters" menu="" required="true" tooltip="">&lt;%=
integration_config = JSON.parse( @request['body'] )['Integration Configuration']
search_field = integration_config['User Field Containing Match to OnSolve Users'] 

responderType = JSON.parse( @results['Assignment Logic']['output'] )['responderType']
responderValue = JSON.parse( @results['Assignment Logic']['output'] )['responderValue']

filter = case responderType
  when "1"
    # 1 means First and Last Name from MIR3 user record. 
    # Not sure how this would ever be considered unique 
    # or guaranteed to match what is in Ivanti.
    "#{search_field} eq #{responderValue}"
  when "2"
    # means employeeId from MIR3.
    "#{search_field} eq #{responderValue}"
  when "3"
    # means MIR3 user name.
    "#{search_field} eq #{responderValue}"
  when "4"
    # means the MIR3 UUID of the user.  Unsure where 
    # or why this would be stored outside of MIR3. 
    "#{search_field} eq #{responderValue}"
  end

filter
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Max Results" label="Max Results" menu="" required="false" tooltip="">1</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="No user" type="Complete" value="@results['Get Ivanti User']['User JSON'].to_s.empty? || @results['Get Ivanti User']['User JSON'].to_s == &quot;null&quot;">system_junction_v1_28</task>
                    <task label="Not empty" type="Complete" value="!@results['Get Ivanti User']['JSON Results'].to_s.empty? &amp;&amp; @results['Get Ivanti User']['JSON Results'].to_s != &quot;null&quot;">routine_onsolve_ivanti_object_update_51</task>
                </dependents>
            </task>
        </request>
    </taskTree>
</tree>