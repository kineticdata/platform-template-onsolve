<tree schema_version="1.0">
    <sourceName>Kinetic Request CE</sourceName>
    <sourceGroup>WebApis > task-activity-monitor</sourceGroup>
    <type>Tree</type>
    <status>Active</status>
    <taskTree builder_version="" schema_version="1.0" version="">
        <name>robot-check-backlog-trigger-mir3</name>
        <author></author>
        <notes></notes>
        <lastID>44</lastID>
        <request>
            <task definition_id="system_start_v1" id="start" name="Start" x="10" y="10">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters></parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">utilities_echo_v1_43</task>
                </dependents>
            </task>
            <task definition_id="kinetic_request_ce_datastore_submission_update_v1" id="kinetic_request_ce_datastore_submission_update_v1_12" name="Update Robot Execution Status" x="66" y="147">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Error Message</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="space_slug" label="Space Slug" menu="" required="false" tooltip="The Space the submission is being updated in (defaults to info value if not provided)."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="submission_id" label="Datastore Submission Id" menu="" required="true" tooltip="The id of the submission being updated.">&lt;%=JSON.parse(@request['Body'])['Kinetic Robot Execution Record Id']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="state" label="State" menu="" required="false" tooltip="The value used to set the submission state."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="values" label="Values" menu="" required="false" tooltip="A JSON map of field names to values that should be set.">{"Status":"Running", "Run Id":&lt;%= @run['Id'] %&gt;}</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="current_page_name" label="Current Page Name" menu="" required="false" tooltip="Set the current page name."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="current_page_navigation" label="Current Page Navigation" menu="" required="false" tooltip="Set the current page navigation."></parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">system_junction_v1_27</task>
                </dependents>
            </task>
            <task definition_id="kinetic_task_api_v2" id="kinetic_task_api_v2_24" name="Check Backlog" x="628.10004" y="143.2">
                <version>2</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Error Message</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="method" label="Method" menu="GET,POST,PUT,PATCH,DELETE" required="true" tooltip="GET,POST,PUT,PATCH,DELETE (Defaults to GET)">GET</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="path" label="Path" menu="" required="true" tooltip="Example: /kapps/:kappSlug/forms/:formSlug">triggers/backlog?timeline=scheduledAt&amp;direction=ASC&amp;limit=150</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="body" label="Body" menu="" required="false" tooltip="JSON body if applicable (POST,PUT,PATCH)"></parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="No error" type="Complete" value="@results['Check Backlog']['Handler Error Message'].to_s.empty?">utilities_echo_v1_30</task>
                    <task label="Has Error" type="Complete" value="!@results['Check Backlog']['Handler Error Message'].to_s.empty?">system_junction_v1_32</task>
                </dependents>
            </task>
            <task definition_id="system_junction_v1" id="system_junction_v1_27" name="Junction: Robot Initiated" x="348" y="157">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters></parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">kinetic_task_api_v2_24</task>
                </dependents>
            </task>
            <task definition_id="utilities_create_trigger_v1" id="utilities_create_trigger_v1_28" name="Robot return trigger" x="484" y="426">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="action_type" label="Action Type" menu="Update,Complete" required="true" tooltip="">Complete</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="deferral_token" label="Deferral Token" menu="" required="true" tooltip="">&lt;%=JSON.parse(@request['Body'])['Kinetic Robot Deferral Token']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="deferred_variables" label="Deferred Results" menu="" required="false" tooltip="">&lt;%=
output = {"message" =&gt; "Check Backlog API Call Failed"}.to_json
if @results.has_key?("Evaluate Backlog Results")
  output = @results['Evaluate Backlog Results']['output']
end

"&lt;results&gt;
&lt;result name=\"output\"&gt;#{output.encode(:xml =&gt; :text)}&lt;/result&gt;
&lt;/results&gt;"
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="message" label="Message" menu="" required="false" tooltip=""></parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">system_junction_v1_29</task>
                </dependents>
            </task>
            <task definition_id="system_junction_v1" id="system_junction_v1_29" name="Junction" x="787" y="431">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters></parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">system_noop_v1_44</task>
                </dependents>
            </task>
            <task definition_id="utilities_echo_v1" id="utilities_echo_v1_30" name="Evaluate Backlog Results" x="977.0005" y="138">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="input" label="Input" menu="" required="true" tooltip="">&lt;%=
backlog = JSON.parse(@results['Check Backlog']['Response Body'])
inputs = JSON.parse(@request['Body'] || "{}")
runtime_inputs = inputs['Runtime Inputs'] || {}
threshold_minutes = runtime_inputs['Threshold Minutes'] || "10"
backlog_threshold = runtime_inputs['Backlog Threshold'] || "1000"
now = Time.new()

output = {
  "escalation" =&gt; false,
  "backlog_count" =&gt; backlog['count'],
  "backlog_count_threshold" =&gt; backlog_threshold.to_s
}

message = []
if backlog['count'] &gt; backlog_threshold.to_i
  output['escalation'] = true
  message.push("Backlog count exceeds threshold")
end

backlog['triggers'].each{|trigger|
  scheduled_at = (Time.parse(trigger['scheduledAt']) + (threshold_minutes.to_i * 60))
  if scheduled_at &lt; now
    output['escalation'] = true
    output["oldest_item_scheduled_time"] = "#{trigger['scheduledAt']}: (#{now - Time.parse(trigger['scheduledAt'])} seconds old)"
    message.push("Backlog duration exceeds threshold")
    break
  end
}

if message.size == 0
  message.push("No backlog concerns")
end
output['message'] = message.join(", ")

output.to_json
%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="Needs Escalation" type="Complete" value="output = JSON.parse(@results['Evaluate Backlog Results']['output'])&#10;output['escalation'] == true">routine_kinetic_email_template_notification_send_v1_31</task>
                    <task label="No Escalation" type="Complete" value="output = JSON.parse(@results['Evaluate Backlog Results']['output'])&#10;output['escalation'] != true">system_junction_v1_32</task>
                    <task label="Backlog Exceeds Threshold" type="Complete" value="@results['Evaluate Backlog Results']['output'].include?(&quot;Backlog duration exceeds threshold&quot;) &amp;&amp; (!JSON.parse(@request['Body'])['Runtime Inputs']['Notification Name'].nil? || !JSON.parse(@request['Body'])['Runtime Inputs']['Notification Group'].nil?)">utilities_echo_v1_39</task>
                </dependents>
            </task>
            <task definition_id="routine_kinetic_email_template_notification_send_v1" id="routine_kinetic_email_template_notification_send_v1_31" name="Sent Error Notification" x="980.998" y="288.9995">
                <version>1</version>
                <configured>true</configured>
                <defers>true</defers>
                <deferrable>true</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="Recipient List" label="Recipient List" menu="" required="true" tooltip="Comma separated list of recipients (Usernames, SMTP Addresses, and/or Team Names)">&lt;%=
inputs = JSON.parse(@request['Body'] || "{}")
runtime_inputs = inputs['Runtime Inputs'] || {}
notification_email = runtime_inputs['Notification Email'] || "support@kineticdata.com"

notification_email
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Notification Template Name" label="Notification Template Name" menu="" required="true" tooltip="Name of the notification template to use when sending this email">OnSolve Error Notification</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="JSON Variables" label="JSON Variables" menu="" required="false" tooltip="JSON input of miscellaneous values.  These values are used to replace placeholder content in notification messages.">&lt;%=
{
  "Error Title" =&gt; "Task Backlog Issue",
  "Error Message" =&gt; @results['Evaluate Backlog Results']['output']
}.to_json
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Kapp Slug Initiating Notification" label="Kapp Slug Initiating Notification" menu="" required="true" tooltip="The slug of the Kapp sending the notification (ex: services, queue, etc.)">admin</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Related Submission Id" label="Related Submission Id" menu="" required="false" tooltip="Id of the submission to get values for, required if using those or attachments in the message"></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Form Slug Initiating Notification" label="Form Slug Initiating Notification" menu="" required="false" tooltip="The slug of the Form sending the notification (ex: work-order, cleaning, etc.)"></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="Is Datastore" label="Is Datastore" menu="" required="false" tooltip="If the Related Submission Id, or Form Slug is a datastore form.">true</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">system_junction_v1_32</task>
                </dependents>
            </task>
            <task definition_id="system_junction_v1" id="system_junction_v1_32" name="Junction: Escalation" x="630.5" y="300.5">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters></parameters>
                <messages></messages>
                <dependents>
                    <task label="Robot Initiated" type="Complete" value="@results['Was Robot Initiated']['output'] == &quot;true&quot;">utilities_create_trigger_v1_28</task>
                    <task label="Not from Robot" type="Complete" value="@results['Was Robot Initiated']['output'] == &quot;false&quot;">system_junction_v1_29</task>
                </dependents>
            </task>
            <task definition_id="utilities_echo_v1" id="utilities_echo_v1_36" name="Generate XML" x="1210.749" y="289.74976000000004">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="input" label="Input" menu="" required="true" tooltip="">&lt;%=
require 'rexml/document'

# Define placeholders to set in the XML notification
placeholder_input_values = [{"name" =&gt; "Message","value" =&gt; "#{@results['Generate Message Content']['output']}"}]

# Get the notification name to populate in the XML
notification_xml = JSON.parse(@request['Body'])['Runtime Inputs']['Notification Name']

# The base XML call to make
str_xml = "&lt;initiateNotifications&gt;&lt;apiVersion&gt;4.14&lt;/apiVersion&gt;&lt;initiateOneNotification&gt;&lt;notification&gt;#{notification_xml}&lt;/notification&gt;&lt;/initiateOneNotification&gt;&lt;/initiateNotifications&gt;"

doc = REXML::Document.new(str_xml)

## add placeholders
# Create a "placeholderValues" element in the notification detail
placeholders = doc.root.insert_after( "//notification", REXML::Element.new("placeholderValues") ) 
placeholder_values = doc.elements['//placeholderValues']

# Loop over all placeholder values and insert a "placeholder" element within placeholders
#   with a "name" and "value" child element
placeholder_input_values.each {|ph|
  if (!ph['name'].nil? &amp;&amp; !ph['name'].empty? &amp;&amp; !ph['value'].nil? &amp;&amp; !ph['value'].empty?)
    ph_el = placeholder_values.add_element 'placeholder'
    ph_name = ph_el.add_element 'name'
    ph_name.text = "#{ph['name']}"
    ph_value = ph_el.add_element 'value'
    ph_value.text = "#{ph['value']}"
  end
}

output = "" 
doc.write(output)
#To pretty print, do this:
#doc.write(output, 2)

output
%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">mir3_generic_call_v1_37</task>
                </dependents>
            </task>
            <task definition_id="mir3_generic_call_v1" id="mir3_generic_call_v1_37" name="Initiate MIR3 Notification" x="1213.749" y="427.74976">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Error Message</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="output_type" label="Output Type" menu="JSON,XML" required="false" tooltip="The output type to return from a successful call.">JSON</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="xml" label="XML structure" menu="" required="true" tooltip="XML body to make the request.  Must be wrapped in a root element.">&lt;%= @results['Generate XML']['output'] %&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="action" label="Action" menu="" required="true" tooltip="The action to call in snake case. ex: get_notification_reports_op - Check wsdl for options.">initiate_notifications_op</parameter>
                </parameters>
                <messages></messages>
                <dependents></dependents>
            </task>
            <task definition_id="utilities_echo_v1" id="utilities_echo_v1_39" name="Generate Message Content" x="1344.749" y="142.74975">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="input" label="Input" menu="" required="true" tooltip="">&lt;%=Time.now().strftime("%Y-%m-%d %I:%M %p")%&gt; [UTC time]: Kinetic backlog time exceeds threshold. Oldest item in backlog created at &lt;%= (JSON.parse(@results['Evaluate Backlog Results']['output'])['oldest_item_scheduled_time'] || "Testing") %&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="Notification Group" type="Complete" value="!JSON.parse(@request['Body'])['Runtime Inputs']['Notification Group'].nil?">utilities_echo_v1_41</task>
                    <task label="Notification Name" type="Complete" value="!JSON.parse(@request['Body'])['Runtime Inputs']['Notification Name'].nil?">utilities_echo_v1_36</task>
                </dependents>
            </task>
            <task definition_id="utilities_echo_v1" id="utilities_echo_v1_41" name="Generate XML Group" x="1531" y="288">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="input" label="Input" menu="" required="true" tooltip="">&lt;%=
require 'rexml/document'

# Get the notification name to populate in the XML
notification_group = JSON.parse(@request['Body'])['Runtime Inputs']['Notification Group']

# The base XML call to make
str_xml = "&lt;initiateNotificationGroups&gt;&lt;apiVersion&gt;4.14&lt;/apiVersion&gt;&lt;initiateOneNotificationGroup&gt;&lt;notificationGroup&gt;#{notification_group}&lt;/notificationGroup&gt;&lt;additionalText&gt;#{@results['Generate Message Content']['output']}&lt;/additionalText&gt;&lt;/initiateOneNotificationGroup&gt;&lt;/initiateNotificationGroups&gt;"

doc = REXML::Document.new(str_xml)

output = "" 
doc.write(output)
#To pretty print, do this:
#doc.write(output, 2)

output
%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">mir3_generic_call_v1_42</task>
                </dependents>
            </task>
            <task definition_id="mir3_generic_call_v1" id="mir3_generic_call_v1_42" name="Initiate MIR3 Notification - Group" x="1532" y="425">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Error Message</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="output_type" label="Output Type" menu="JSON,XML" required="false" tooltip="The output type to return from a successful call.">JSON</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="xml" label="XML structure" menu="" required="true" tooltip="XML body to make the request.  Must be wrapped in a root element.">&lt;%= @results['Generate XML Group']['output'] %&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="action" label="Action" menu="" required="true" tooltip="The action to call in snake case. ex: get_notification_reports_op - Check wsdl for options.">initiate_notification_groups_op</parameter>
                </parameters>
                <messages></messages>
                <dependents></dependents>
            </task>
            <task definition_id="utilities_echo_v1" id="utilities_echo_v1_43" name="Was Robot Initiated" x="210" y="14">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="input" label="Input" menu="" required="true" tooltip="">&lt;%=
begin 
  JSON.parse(@request['Body']).has_key? ('Kinetic Robot Execution Record Id')
rescue
  false
end
%&gt;</parameter>
                </parameters>
                <messages>
                    <message type="Complete"></message>
                </messages>
                <dependents>
                    <task label="Robot Initiated" type="Complete" value="@results['Was Robot Initiated']['output'] == &quot;true&quot;">kinetic_request_ce_datastore_submission_update_v1_12</task>
                    <task label="Not from Robot" type="Complete" value="@results['Was Robot Initiated']['output'] == &quot;false&quot;">system_junction_v1_27</task>
                </dependents>
            </task>
            <task definition_id="system_noop_v1" id="system_noop_v1_44" name="End" x="790" y="533">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters></parameters>
                <messages>
                    <message type="Complete"></message>
                </messages>
                <dependents></dependents>
            </task>
        </request>
    </taskTree>
</tree>