<tree schema_version="1.0">
    <sourceName>Kinetic Request CE</sourceName>
    <sourceGroup>WebApis > task-activity-monitor</sourceGroup>
    <type>Tree</type>
    <status>Active</status>
    <taskTree builder_version="" schema_version="1.0" version="">
        <name>kinetic-source-system-tickets-data-processing-custom-bigpanda</name>
        <author></author>
        <notes></notes>
        <lastID>20</lastID>
        <request>
            <task definition_id="system_start_v1" id="start" name="Start" x="10" y="10">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters></parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">utilities_echo_v1_13</task>
                </dependents>
            </task>
            <task definition_id="kinetic_request_ce_submission_search_v2" id="kinetic_request_ce_submission_search_v2_1" name="Active Alerts" x="250.3" y="109.41667">
                <version>2</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Raise Error</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="space_slug" label="Space Slug" menu="" required="false" tooltip="The Space the submission is being retrieved from (defaults to info value if not provided)."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="kapp_slug" label="Kapp Slug" menu="" required="true" tooltip="The slug of the Kapp to search for submissions in.">task-activity-monitor</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="form_slug" label="Form Slug" menu="" required="false" tooltip="The slug of the Form to search for submissions in.">task-activity-monitor</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="direction" label="Direction" menu="" required="false" tooltip="The index direction to use for the search, either ASC or DESC. ASC is the default if left blank or invalid option used."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="query" label="Query" menu="" required="false" tooltip="The query that will be used to search the submissions. Ex: values[company]=Kinetic">&lt;%=
#details = JSON.parse( JSON.parse( @request['Body'] )['Source Data'] )
details = JSON.parse( @request['Body'] )['Source Data']
integration_config = JSON.parse( JSON.parse(@request['Body'])['Integration Config Values'] )
params = JSON.parse( integration_config['Initiation Custom Action Parameters'] || "{}" )

recipient_group = details[0]['incident']['alerts'][0]['tags'].select{ |tag| 
  #tag['name'] == "bp_mir3recipient"
  tag['name'] == "bp_mir3schedulename"
}[0]['value']

#source_id_value = begin
#    details[integration_config['Internal Unique Key Field Name']]['value'] || details[integration_config['Internal Unique Key Field Name']]
#  rescue
#    details[integration_config['Internal Unique Key Field Name']]
#  end
timestamp = Time.parse(@results['Echo Timestamp']['output'])
#source_id = "#{timestamp.strftime("%y%m%d - %H%M%S")} - #{details[0]['RecipientGroup'].gsub('&amp;', '%26')}"
source_id = "#{timestamp.strftime("%y%m%d - %H%M%S")} - #{recipient_group.gsub('&amp;', '%26')}"
#source_ref_id = details[0]['RecipientGroup'].gsub('&amp;', '%26')
source_ref_id = recipient_group.gsub('&amp;', '%26')

# Determine the time to wait between team notifications.  This timestamp will be used in the query to see if there are
# any notifications to this team in that timeframe.
time_check = timestamp - (params['Minutes to wait between group notifications'].to_i * 60)

query_addendum = ""
if integration_config['Notify more than once per record'] == "Yes"
  query_addendum = %|AND values[Onsolve Status] IN ("Pending","Open")|
end

query = %|coreState="Submitted" AND values[Integration Id]="#{JSON.parse(@request['Body'])['Integration Config Id']}" AND values[Source Reference Id]="#{source_ref_id}" AND createdAt&gt;"#{time_check.utc.iso8601}"| + query_addendum

query%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="limit" label="Limit" menu="" required="false" tooltip="An integer representing the max results that the search can return."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="includes" label="Includes" menu="" required="false" tooltip="Comma separated list of items to be returned by the API call.  If left blank, 'details,form,values' will be used.">details,values</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="page_token" label="Page Token" menu="" required="false" tooltip="The value to use as the offset for the page of submissions to return. The submission that matches this value will not be included in the results."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="return_type" label="Return Type" menu="JSON,XML,ID List" required="true" tooltip="The format that the results should be returned in.">JSON</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="None" type="Complete" value="@results['Active Alerts']['Count'].to_i == 0">kinetic_core_api_v1_17</task>
                    <task label="Any - Non Unique" type="Complete" value="integration_config = JSON.parse( JSON.parse(@request['Body'])['Integration Config Values'] )&#10;integration_config['Notify more than once per record'] == &quot;Yes&quot; &amp;&amp; &#10;@results['Active Alerts']['Count'].to_i &gt; 0">system_noop_v1_4</task>
                    <task label="Any - Unique" type="Complete" value="integration_config = JSON.parse( JSON.parse(@request['Body'])['Integration Config Values'] )&#10;integration_config['Notify more than once per record'] == &quot;No&quot; &amp;&amp; &#10;@results['Active Alerts']['Count'].to_i &gt; 0">system_junction_v1_11</task>
                </dependents>
            </task>
            <task definition_id="kinetic_request_ce_submission_create_v1" id="kinetic_request_ce_submission_create_v1_2" name="Create Submission - Orig" x="45.86945" y="456.0583">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Raise Error</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="space_slug" label="Space Slug" menu="" required="false" tooltip="The Space the submission is being retrieved from (defaults to info value if not provided)."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="kapp_slug" label="Kapp Slug" menu="" required="true" tooltip="The slug of the Kapp the submission is for.">task-activity-monitor</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="form_slug" label="Form Slug" menu="" required="true" tooltip="The slug of the form the submission is for.">task-activity-monitor</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="values" label="Values" menu="" required="false" tooltip="JSON map of submission field values.">&lt;%= 
integration_details = JSON.parse( JSON.parse(@request['Body'])['Integration Config Values'] )
# replace 8 backslashes with 4 in source data
#input_details = JSON.parse(@request['Body'])['Source Data'].gsub("\\u000c","?").gsub("1\\f","1/f").gsub("\\u0006","?")
input_details = JSON.parse(@request['Body'])['Source Data']

#details = JSON.parse( JSON.parse(@request['Body'])['Source Data'] )
details = JSON.parse( input_details )


response_expected = "Yes"
if integration_details['Interim Update Action'] == "None" &amp;&amp; integration_details['Notification Result Action'] == "None"
  response_expected = "No"
end
#source_id = details[integration_details['Internal Unique Key Field Name']]['value'] || details[integration_details['Internal Unique Key Field Name']]
#source_ref_id = details[integration_details['External Unique Key Field Name']]['value'] || details[integration_details['External Unique Key Field Name']]
#source_id = begin
#    details[integration_details['Internal Unique Key Field Name']]['value'] || details[integration_details['Internal Unique Key Field Name']]
#  rescue
#    details[integration_details['Internal Unique Key Field Name']]
#  end
timestamp = Time.parse(@results['Echo Timestamp']['output'])
#timestamp_est = ::TZInfo::Timezone.get("America/New_York").to_local(timestamp)
timestamp_est = (timestamp + @results['Convert to Eastern Time']['Offset Seconds'].to_i)

recipient_group = ""
tags = details[0]['incident']['alerts'][0]['tags']
tags.each{ |tag|
  if tag['name'] == "bp_mir3recipient"
    recipient_group = tag['value']
  end
}

#source_id = "#{timestamp_est.strftime("%y%m%d - %H%M%S")} - #{details[0]['RecipientGroup']}"
source_id = "#{timestamp_est.strftime("%y%m%d - %H%M%S")} - #{recipient_group}"

#source_ref_id = begin
#    details[integration_details['External Unique Key Field Name']]['value'] || details[integration_details['External Unique Key Field Name']]
#  rescue
#    details[integration_details['External Unique Key Field Name']]
#  end
#source_ref_id = details[0]['RecipientGroup']
source_ref_id = recipient_group


###transaction_keys = []
###details.each{|entry|
###  transaction_keys.push(entry['TransactionKey'])
###}

{
  "Integration Name" =&gt; integration_details['Name'],
  "Integration Id" =&gt; JSON.parse(@request['Body'])['Integration Config Id'],
  "Response Expected" =&gt; response_expected,
###  "Message" =&gt; {"Transaction IDs":transaction_keys}.to_json,
  "Source Id" =&gt; source_id,
  "Source Reference Id" =&gt; source_ref_id,
  "Onsolve Status" =&gt; "Pending",
  "Source Data" =&gt; details
}.to_json%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="current_page_name" label="Current Page Name" menu="" required="false" tooltip="Set the current page name."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="current_page_navigation" label="Current Page Navigation" menu="" required="false" tooltip="Set the current page navigation."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="origin_id" label="Origin ID" menu="" required="false" tooltip="Set the origin ID."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="parent_id" label="Parent ID" menu="" required="false" tooltip="Set the parent ID."></parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">kinetic_request_ce_submission_update_v1_3</task>
                </dependents>
            </task>
            <task definition_id="kinetic_request_ce_submission_update_v1" id="kinetic_request_ce_submission_update_v1_3" name="Change State" x="48.87072" y="541.00696">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Raise Error</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="space_slug" label="Space Slug" menu="" required="false" tooltip="The Space the submission is being retrieved from (defaults to info value if not provided)."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="submission_id" label="Submission Id" menu="" required="true" tooltip="The id of the submission being updated.">&lt;%=@results['Create Submission - Orig']['Submission ID']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="state" label="State" menu="" required="false" tooltip="The value used to set the submission state.">Submitted</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="values" label="Values" menu="" required="false" tooltip="A JSON map of field names to values that should be set."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="current_page_name" label="Current Page Name" menu="" required="false" tooltip="Set the current page name."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="current_page_navigation" label="Current Page Navigation" menu="" required="false" tooltip="Set the current page navigation."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="origin_id" label="Origin ID" menu="" required="false" tooltip="Set the origin ID."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="parent_id" label="Parent ID" menu="" required="false" tooltip="Set the parent ID."></parameter>
                </parameters>
                <messages></messages>
                <dependents></dependents>
            </task>
            <task definition_id="system_noop_v1" id="system_noop_v1_4" name="Existing Notification In Process" x="554" y="106">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters></parameters>
                <messages></messages>
                <dependents>
                    <task label="Has Restart Criteria" type="Complete" value="!(JSON.parse( JSON.parse(@request['Body'])['Integration Config Values'] )['Restart Notification Criteria']).nil?&#10;&#10;">utilities_echo_v1_5</task>
                    <task label="Has Stop Criteria" type="Complete" value="!(JSON.parse( JSON.parse(@request['Body'])['Integration Config Values'] )['Stop Notification Criteria']).nil?">utilities_echo_v1_9</task>
                </dependents>
            </task>
            <task definition_id="utilities_echo_v1" id="utilities_echo_v1_5" name="Evaluate Restart Condition" x="862" y="112">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="input" label="Input" menu="" required="true" tooltip="">&lt;%=

def organize(operator, obj)
  wrapper_array = []
  clause_array = []
  operator_value = "||" if operator == "OR"
  operator_value = "&amp;&amp;" if operator == "AND"
  obj.each{ |k, v|
    if v.is_a? Hash
      clause_array.push( organize(k, v) )
    else
      clause_array.push( evaluate(k, v ) )
    end
  }
  wrapper_array.push( "(" )
  # Intersperse clause array with operator and add to wrapper_array
  wrapper_array.push( clause_array.flat_map { |x| [x, operator_value] }[0...-1] )
  wrapper_array.push( ")" )

  return wrapper_array.flatten
end

def evaluate(field_input, check)
  # determine which part of the field to retrieve - the display_value or the field_value
  field_qualifier = 'value'
  field = field_input
  field_array = field_input.split(".")
  if field_array.length &gt; 0
    if ["display_value","value"].include? field_array[1]
      field_qualifier = field_array[1]
    end
    field = field_array[0]
  end

  existing_activity_record = JSON.parse( @results['Active Alerts']['Result'] )
  old_data = JSON.parse( existing_activity_record[0]['values']['Source Data'] )
  new_data = JSON.parse( JSON.parse(@request['Body'])['Source Data'] )

  # Be able to handle if the data uses field qualifiers or not
  new_field_value = new_data[field][field_qualifier] || new_data[field]
  old_field_value = old_data[field][field_qualifier] || old_data[field]

  evaluation_result = false
  case check
  when "{{Different}}"
    evaluation_result = true if new_field_value != old_field_value
  when "{{Different Not Empty}}"
    evaluation_result = true if new_field_value != old_field_value &amp;&amp; !new_field_value.to_s.empty?
  when "{{Empty}}"
    evaluation_result = true if new_field_value.to_s.empty?
  when "{{Not Empty}}"
    evaluation_result = true if !new_field_value.to_s.empty?
  else
    evaluation_result = true if new_field_value == check
  end
  return evaluation_result
end

def determine(criteria)
  array=[]
  a = JSON.parse(criteria)
  a.each{ |k, v|
    if v.is_a? Hash
      array.push( organize(k, v) )
    else
      array.push( evaluate(k, v) )
    end
  }
  result = eval(array.join)
  return result
end

restart_criteria = JSON.parse( JSON.parse(@request['Body'])['Integration Config Values'] )['Restart Notification Criteria']

restart_result = determine(restart_criteria)

restart_result
%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="True" type="Complete" value="@results['Evaluate Restart Condition']['output'].strip == &quot;true&quot;">utilities_create_trigger_v1_6</task>
                </dependents>
            </task>
            <task definition_id="utilities_create_trigger_v1" id="utilities_create_trigger_v1_6" name="Send Stop Notification Update Trigger (Restarting)" x="862.8105" y="372.1616">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="action_type" label="Action Type" menu="Update,Complete" required="true" tooltip="">Update</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="deferral_token" label="Deferral Token" menu="" required="true" tooltip="">&lt;%=
existing_activity_record = JSON.parse( @results['Active Alerts']['Result'] )
existing_activity_record[0]['values']['Deferral Token']
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="deferred_variables" label="Deferred Results" menu="" required="false" tooltip=""></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="message" label="Message" menu="" required="false" tooltip="">Stop Notification</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">kinetic_core_api_v1_18</task>
                </dependents>
            </task>
            <task definition_id="kinetic_request_ce_submission_create_v1" id="kinetic_request_ce_submission_create_v1_7" name="Create Submission (Restart)" x="1048.9246" y="486.0773">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Raise Error</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="space_slug" label="Space Slug" menu="" required="false" tooltip="The Space the submission is being retrieved from (defaults to info value if not provided)."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="kapp_slug" label="Kapp Slug" menu="" required="true" tooltip="The slug of the Kapp the submission is for.">task-activity-monitor</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="form_slug" label="Form Slug" menu="" required="true" tooltip="The slug of the form the submission is for.">task-activity-monitor</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="values" label="Values" menu="" required="false" tooltip="JSON map of submission field values.">&lt;%= 
integration_details = JSON.parse( JSON.parse(@request['Body'])['Integration Config Values'] )
details = JSON.parse( JSON.parse(@request['Body'])['Source Data'] )
response_expected = "Yes"
if integration_details['Interim Update Action'] == "None" &amp;&amp; integration_details['Notification Result Action'] == "None"
  response_expected = "No"
end
#source_id = details[integration_details['Internal Unique Key Field Name']]['value'] || details[integration_details['Internal Unique Key Field Name']]
#source_ref_id = details[integration_details['External Unique Key Field Name']]['value'] || details[integration_details['External Unique Key Field Name']]
#source_id = begin
#    details[integration_details['Internal Unique Key Field Name']]['value'] || details[integration_details['Internal Unique Key Field Name']]
#  rescue
#    details[integration_details['Internal Unique Key Field Name']]
#  end
timestamp = Time.parse(@results['Echo Timestamp']['output'])
#timestamp_est = ::TZInfo::Timezone.get("America/New_York").to_local(timestamp)
timestamp_est = (timestamp + @results['Convert to Eastern Time']['Offset Seconds'].to_i)
source_id = "#{timestamp_est.strftime("%y%m%d - %H%M%S")} - #{details[0]['RecipientGroup']}"

recipient_group = ""
tags = details[0]['incident']['alerts'][0]['tags']
tags.each{ |tag|
  if tag['name'] == "bp_mir3recipient"
    recipient_group = tag['value']
  end
}
#source_id = "#{timestamp_est.strftime("%y%m%d - %H%M%S")} - #{details[0]['RecipientGroup']}"
source_id = "#{timestamp_est.strftime("%y%m%d - %H%M%S")} - #{recipient_group}"



#source_ref_id = begin
#    details[integration_details['External Unique Key Field Name']]['value'] || details[integration_details['External Unique Key Field Name']]
#  rescue
#    details[integration_details['External Unique Key Field Name']]
#  end
#source_ref_id = details[0]['RecipientGroup']}
source_ref_id = recipient_group

transaction_keys = []
details.each{|entry|
  transaction_keys.push(entry['TransactionKey'])
}

{
  "Integration Name" =&gt; integration_details['Name'],
  "Integration Id" =&gt; JSON.parse(@request['Body'])['Integration Config Id'],
  "Response Expected" =&gt; response_expected,
  "Message" =&gt; {"Transaction IDs":transaction_keys}.to_json,
  "Source Id" =&gt; source_id,
  "Source Reference Id" =&gt; source_ref_id,
  "Onsolve Status" =&gt; "Pending",
  "Source Data" =&gt; details
}.to_json%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="current_page_name" label="Current Page Name" menu="" required="false" tooltip="Set the current page name."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="current_page_navigation" label="Current Page Navigation" menu="" required="false" tooltip="Set the current page navigation."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="origin_id" label="Origin ID" menu="" required="false" tooltip="Set the origin ID."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="parent_id" label="Parent ID" menu="" required="false" tooltip="Set the parent ID."></parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">kinetic_request_ce_submission_update_v1_8</task>
                </dependents>
            </task>
            <task definition_id="kinetic_request_ce_submission_update_v1" id="kinetic_request_ce_submission_update_v1_8" name="Change State (Restart)" x="1052.9283" y="575.03235">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Raise Error</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="space_slug" label="Space Slug" menu="" required="false" tooltip="The Space the submission is being retrieved from (defaults to info value if not provided)."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="submission_id" label="Submission Id" menu="" required="true" tooltip="The id of the submission being updated.">&lt;%=@results['Create Submission (Restart)']['Submission ID']%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="state" label="State" menu="" required="false" tooltip="The value used to set the submission state.">Submitted</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="values" label="Values" menu="" required="false" tooltip="A JSON map of field names to values that should be set."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="current_page_name" label="Current Page Name" menu="" required="false" tooltip="Set the current page name."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="current_page_navigation" label="Current Page Navigation" menu="" required="false" tooltip="Set the current page navigation."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="origin_id" label="Origin ID" menu="" required="false" tooltip="Set the origin ID."></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="parent_id" label="Parent ID" menu="" required="false" tooltip="Set the parent ID."></parameter>
                </parameters>
                <messages></messages>
                <dependents></dependents>
            </task>
            <task definition_id="utilities_echo_v1" id="utilities_echo_v1_9" name="Evaluate Stop Condition" x="551" y="237">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="input" label="Input" menu="" required="true" tooltip="">&lt;%=

def organize(operator, obj)
  wrapper_array = []
  clause_array = []
  operator_value = "||" if operator == "OR"
  operator_value = "&amp;&amp;" if operator == "AND"
  obj.each{ |k, v|
    if v.is_a? Hash
      clause_array.push( organize(k, v) )
    else
      clause_array.push( evaluate(k, v ) )
    end
  }
  wrapper_array.push( "(" )
  # Intersperse clause array with operator and add to wrapper_array
  wrapper_array.push( clause_array.flat_map { |x| [x, operator_value] }[0...-1] )
  wrapper_array.push( ")" )

  return wrapper_array.flatten
end

def evaluate(field_input, check)
  # determine which part of the field to retrieve - the display_value or the field_value
  field_qualifier = 'value'
  field = field_input
  field_array = field_input.split(".")
  if field_array.length &gt; 0
    if ["display_value","value"].include? field_array[1]
      field_qualifier = field_array[1]
    end
    field = field_array[0]
  end

  existing_activity_record = JSON.parse( @results['Active Alerts']['Result'] )
  old_data = JSON.parse( existing_activity_record[0]['values']['Source Data'] )
  new_data = JSON.parse( JSON.parse(@request['Body'])['Source Data'] )

  # Be able to handle if the data uses field qualifiers or not
  new_field_value = new_data[field][field_qualifier] || new_data[field]
  old_field_value = old_data[field][field_qualifier] || old_data[field]

  evaluation_result = false
  case check
  when "{{Different}}"
    evaluation_result = true if new_field_value != old_field_value
  when "{{Different Not Empty}}"
    evaluation_result = true if new_field_value != old_field_value &amp;&amp; !new_field_value.to_s.empty?
  when "{{Empty}}"
    evaluation_result = true if new_field_value.to_s.empty?
  when "{{Not Empty}}"
    evaluation_result = true if !new_field_value.to_s.empty?
  else
    evaluation_result = true if new_field_value == check
  end
  return evaluation_result
end

def determine(criteria)
  array=[]
  a = JSON.parse(criteria)
  a.each{ |k, v|
    if v.is_a? Hash
      array.push( organize(k, v) )
    else
      array.push( evaluate(k, v) )
    end
  }
  result = eval(array.join)
  return result
end

stop_criteria = JSON.parse( JSON.parse(@request['Body'])['Integration Config Values'] )['Stop Notification Criteria']
restart_criteria = JSON.parse( JSON.parse(@request['Body'])['Integration Config Values'] )['Restart Notification Criteria']

stop_result = determine(stop_criteria)

# This checks the restart_criteria in case there is a competing stop / restart rule.
# Restart will always take precedence.
if !restart_criteria.nil?
  restart_result = determine(restart_criteria)

  # Since the restart process already does a stop, we don't want to do another one or
  # there could be two completes of a defer node in down stream processes.
  # So we set the stop_result to false and let the restart process do the stop.
  stop_result = false if restart_result

end

stop_result
%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="True" type="Complete" value="@results['Evaluate Stop Condition']['output'].strip == &quot;true&quot;">utilities_create_trigger_v1_10</task>
                </dependents>
            </task>
            <task definition_id="utilities_create_trigger_v1" id="utilities_create_trigger_v1_10" name="Send Stop Notification Update Trigger" x="554" y="371">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="action_type" label="Action Type" menu="Update,Complete" required="true" tooltip="">Update</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="deferral_token" label="Deferral Token" menu="" required="true" tooltip="">&lt;%=
existing_activity_record = JSON.parse( @results['Active Alerts']['Result'] )
existing_activity_record[0]['values']['Deferral Token']
%&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="deferred_variables" label="Deferred Results" menu="" required="false" tooltip=""></parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="message" label="Message" menu="" required="false" tooltip="">Stop Notification</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">system_junction_v1_11</task>
                </dependents>
            </task>
            <task definition_id="system_junction_v1" id="system_junction_v1_11" name="Junction" x="566" y="544">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters></parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">system_noop_v1_16</task>
                </dependents>
            </task>
            <task definition_id="utilities_echo_v1" id="utilities_echo_v1_13" name="Echo Timestamp" x="30" y="107">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="input" label="Input" menu="" required="true" tooltip="">&lt;%=Time.now.strftime("%Y-%m-%d %H:%M")%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">utility_date_in_timezone_v2_15</task>
                </dependents>
            </task>
            <task definition_id="utility_date_in_timezone_v2" id="utility_date_in_timezone_v2_15" name="Convert to Eastern Time" x="30" y="307">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="timezone" label="Timezone" menu="" required="true" tooltip="The timezone being explored.">America/New_York</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="timestamp" label="Timestamp" menu="" required="false" tooltip="Current time will be used if a timestamp is not entered. Format: YYYY-MM-DD'T'HH:MM:SS'Z' (iso8601)">&lt;%= Time.parse(@results['Echo Timestamp']['output']).iso8601 %&gt;</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="direction" label="Direction" menu="To Local,To UTC" required="true" tooltip="Convert from UTC to local time, or a local time to a UTC.">To Local</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">kinetic_request_ce_submission_search_v2_1</task>
                </dependents>
            </task>
            <task definition_id="system_noop_v1" id="system_noop_v1_16" name="End" x="566" y="635">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters></parameters>
                <messages></messages>
                <dependents></dependents>
            </task>
            <task definition_id="kinetic_core_api_v1" id="kinetic_core_api_v1_17" name="Create Submission" x="250.14069" y="536.03424">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Raise Error</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="method" label="Method" menu="GET,POST,PUT,PATCH,DELETE" required="true" tooltip="GET,POST,PUT,PATCH,DELETE (Defaults to GET)">POST</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="path" label="Path" menu="" required="true" tooltip="Example: /kapps/:kappSlug/forms/:formSlug">/kapps/task-activity-monitor/forms/task-activity-monitor/submissions?completed=true</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="body" label="Body" menu="" required="false" tooltip="JSON body if applicable (POST,PUT,PATCH)">&lt;%= 
integration_details = JSON.parse( JSON.parse(@request['Body'])['Integration Config Values'] )
# replace 8 backslashes with 4 in source data
#input_details = JSON.parse(@request['Body'])['Source Data'].gsub("\\u000c","?").gsub("1\\f","1/f").gsub("\\u0006","?")
#input_details = JSON.parse(@request['Body'])['Source Data']
details = JSON.parse(@request['Body'])['Source Data']

#details = JSON.parse( JSON.parse(@request['Body'])['Source Data'] )
#details = JSON.parse( input_details )


response_expected = "Yes"
if integration_details['Interim Update Action'] == "None" &amp;&amp; integration_details['Notification Result Action'] == "None"
  response_expected = "No"
end
#source_id = details[integration_details['Internal Unique Key Field Name']]['value'] || details[integration_details['Internal Unique Key Field Name']]
#source_ref_id = details[integration_details['External Unique Key Field Name']]['value'] || details[integration_details['External Unique Key Field Name']]
#source_id = begin
#    details[integration_details['Internal Unique Key Field Name']]['value'] || details[integration_details['Internal Unique Key Field Name']]
#  rescue
#    details[integration_details['Internal Unique Key Field Name']]
#  end
timestamp = Time.parse(@results['Echo Timestamp']['output'])
#timestamp_est = ::TZInfo::Timezone.get("America/New_York").to_local(timestamp)
timestamp_est = (timestamp + @results['Convert to Eastern Time']['Offset Seconds'].to_i)

recipient_group = ""
tags = details[0]['incident']['alerts'][0]['tags']
tags.each{ |tag|
  if tag['name'] == "bp_mir3recipient"
    recipient_group = tag['value']
  end
}

#source_id = "#{timestamp_est.strftime("%y%m%d - %H%M%S")} - #{details[0]['RecipientGroup']}"
source_id = "#{timestamp_est.strftime("%y%m%d - %H%M%S")} - #{recipient_group}"

#source_ref_id = begin
#    details[integration_details['External Unique Key Field Name']]['value'] || details[integration_details['External Unique Key Field Name']]
#  rescue
#    details[integration_details['External Unique Key Field Name']]
#  end
#source_ref_id = details[0]['RecipientGroup']
source_ref_id = recipient_group


###transaction_keys = []
###details.each{|entry|
###  transaction_keys.push(entry['TransactionKey'])
###}

{
  "values" =&gt; {
    "Integration Name" =&gt; integration_details['Name'],
    "Integration Id" =&gt; JSON.parse(@request['Body'])['Integration Config Id'],
    "Response Expected" =&gt; response_expected,
    ###  "Message" =&gt; {"Transaction IDs":transaction_keys}.to_json,
    "Message" =&gt; {"Source Submission Ids" =&gt; JSON.parse(@request['Body'])['Source Submission Ids']}.to_json,
    "Source Id" =&gt; source_id,
    "Source Reference Id" =&gt; source_ref_id,
    "Onsolve Status" =&gt; "Pending",
    "Source Data" =&gt; details
  }
}.to_json%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">system_junction_v1_11</task>
                </dependents>
            </task>
            <task definition_id="kinetic_core_api_v1" id="kinetic_core_api_v1_18" name="Create Submission (Restart)2" x="865.54816" y="530.3359">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter dependsOnId="" dependsOnValue="" id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Raise Error</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="method" label="Method" menu="GET,POST,PUT,PATCH,DELETE" required="true" tooltip="GET,POST,PUT,PATCH,DELETE (Defaults to GET)">POST</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="path" label="Path" menu="" required="true" tooltip="Example: /kapps/:kappSlug/forms/:formSlug">/kapps/task-activity-monitor/forms/task-activity-monitor/submissions?completed=true</parameter>
                    <parameter dependsOnId="" dependsOnValue="" id="body" label="Body" menu="" required="false" tooltip="JSON body if applicable (POST,PUT,PATCH)">&lt;%= 
integration_details = JSON.parse( JSON.parse(@request['Body'])['Integration Config Values'] )
# replace 8 backslashes with 4 in source data
#input_details = JSON.parse(@request['Body'])['Source Data'].gsub("\\u000c","?").gsub("1\\f","1/f").gsub("\\u0006","?")
input_details = JSON.parse(@request['Body'])['Source Data']

#details = JSON.parse( JSON.parse(@request['Body'])['Source Data'] )
details = JSON.parse( input_details )


response_expected = "Yes"
if integration_details['Interim Update Action'] == "None" &amp;&amp; integration_details['Notification Result Action'] == "None"
  response_expected = "No"
end
#source_id = details[integration_details['Internal Unique Key Field Name']]['value'] || details[integration_details['Internal Unique Key Field Name']]
#source_ref_id = details[integration_details['External Unique Key Field Name']]['value'] || details[integration_details['External Unique Key Field Name']]
#source_id = begin
#    details[integration_details['Internal Unique Key Field Name']]['value'] || details[integration_details['Internal Unique Key Field Name']]
#  rescue
#    details[integration_details['Internal Unique Key Field Name']]
#  end
timestamp = Time.parse(@results['Echo Timestamp']['output'])
#timestamp_est = ::TZInfo::Timezone.get("America/New_York").to_local(timestamp)
timestamp_est = (timestamp + @results['Convert to Eastern Time']['Offset Seconds'].to_i)

recipient_group = ""
tags = details[0]['incident']['alerts'][0]['tags']
tags.each{ |tag|
  if tag['name'] == "bp_mir3recipient"
    recipient_group = tag['value']
  end
}

#source_id = "#{timestamp_est.strftime("%y%m%d - %H%M%S")} - #{details[0]['RecipientGroup']}"
source_id = "#{timestamp_est.strftime("%y%m%d - %H%M%S")} - #{recipient_group}"

#source_ref_id = begin
#    details[integration_details['External Unique Key Field Name']]['value'] || details[integration_details['External Unique Key Field Name']]
#  rescue
#    details[integration_details['External Unique Key Field Name']]
#  end
#source_ref_id = details[0]['RecipientGroup']
source_ref_id = recipient_group


###transaction_keys = []
###details.each{|entry|
###  transaction_keys.push(entry['TransactionKey'])
###}

{
  "values" =&gt; {
    "Integration Name" =&gt; integration_details['Name'],
    "Integration Id" =&gt; JSON.parse(@request['Body'])['Integration Config Id'],
    "Response Expected" =&gt; response_expected,
    ###  "Message" =&gt; {"Transaction IDs":transaction_keys}.to_json,
    "Source Id" =&gt; source_id,
    "Source Reference Id" =&gt; source_ref_id,
    "Onsolve Status" =&gt; "Pending",
    "Source Data" =&gt; details
  }
}.to_json%&gt;</parameter>
                </parameters>
                <messages></messages>
                <dependents>
                    <task label="" type="Complete" value="">system_junction_v1_11</task>
                </dependents>
            </task>
        </request>
    </taskTree>
</tree>