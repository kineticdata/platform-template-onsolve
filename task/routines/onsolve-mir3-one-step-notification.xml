<tree schema_version="1.0">
<sourceName>-</sourceName>
<sourceGroup>-</sourceGroup>
<definitionId>routine_onsolve_mir3_one_step_notification_v1</definitionId>
<type>Global Routine</type>
<status>Active</status>
<taskTree builder_version="" schema_version="1.0" version="">
        <name>OnSolve MIR3 One Step Notification</name>
        <author/>
        <notes/>
        <lastID>20</lastID>
        <taskDefinition id="routine_onsolve_mir3_one_step_notification_v1" name="OnSolve MIR3 One Step Notification" schema_version="1.0" version="1">
            <visible>false</visible>
            <deferrable>true</deferrable>
            <parameters>
                <parameter id="Notification Detail" label="Notification Detail" required="true" tooltip="The title of the notification to be found and retrieved"/>
                <parameter id="Placeholder JSON" label="Placeholder JSON" required="false" tooltip="An object that contains the placeholder names and values: [{&quot;name&quot;:&quot;placeholder name&quot;, &quot;value&quot;:&quot;placeholder value&quot;},{&quot;name&quot;:&quot;placeholder name 2&quot;, &quot;value&quot;:&quot;placeholder value 2&quot;}...]"/>
                <parameter id="MIR3 Individual Recipient Field" label="MIR3 Individual Recipient Field" required="true" tooltip="The MIR3 field that contains the value(s) provided in the Individual Recipients List.  Required field, even if individual receipients is not populated.  Common values are 'employeeId' and 'username'">employeeId</parameter>
                <parameter id="Recipients JSON" label="Recipients JSON" required="true" tooltip="JSON object of recipients in one of two formats {&quot;individuals&quot;:&quot;...&quot;,&quot;groups&quot;:&quot;...&quot;,&quot;schedules&quot;:&quot;...&quot;} or {&quot;Escalation Level 1&quot;:{&quot;individuals&quot;:&quot;...&quot;,&quot;groups&quot;:&quot;...&quot;,&quot;schedules&quot;:&quot;...&quot;},&quot;Escalation Level 2&quot;:{...}}}"/>
                <parameter id="OnCall JSON" label="OnCall JSON" required="false" tooltip="JSON object corresponding to Oncall, arranged as follows:  {&quot;1&quot;:[&quot;user1&quot;,&quot;user2&quot;],&quot;2&quot;:[&quot;user3&quot;],...}"/>
            </parameters>
            <handler name="system_tree_call" version="1"/>
            <results format="xml">
                <result name="Success" tooltip="'true' or 'false'"/>
                <result name="Notification Report UUID" tooltip="The UUID of the notification from MIR3"/>
                <result name="Output" tooltip="The output from the call - either the XML notificationDetail block, or the error message"/>
                <result name="Title" tooltip="The notification title"/>
                <result name="Additional JSON Output" tooltip="Any additional output that coud be included in the future"/>
            </results>
        </taskDefinition>
        <request>
            <task definition_id="system_start_v1" id="start" name="Start" x="10" y="10">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters/>
                <messages/>
                <dependents>
                    <task label="" type="Complete" value="">utilities_echo_v1_12</task>
                </dependents>
            </task>
            <task definition_id="utilities_echo_v1" id="utilities_echo_v1_4" name="Parse or handle output" x="543" y="88">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter id="input" label="Input" menu="" required="true" tooltip="">&lt;%=
response = JSON.parse(@results['MIR3 Call: One Step Notification']['output'])
successful = response['success']

output = {
  "Success" =&gt; successful.to_s,
  "Full Output JSON" =&gt; response,
  "Notification Report UUID" =&gt; nil
}

if successful
  output['Notification Report UUID'] = response['one_step_notification_response']['notification_report_uuid']
end

output.to_json
%&gt;</parameter>
                </parameters>
                <messages>
                    <message type="Create"/>
                    <message type="Update"/>
                    <message type="Complete"/>
                </messages>
                <dependents>
                    <task label="" type="Complete" value="">system_tree_return_v1_20</task>
                </dependents>
            </task>
            <task definition_id="mir3_generic_call_v1" id="mir3_generic_call_v1_9" name="MIR3 Call: One Step Notification" x="166" y="88">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter id="error_handling" label="Error Handling" menu="Error Message,Raise Error" required="true" tooltip="Determine what to return if an error is encountered.">Raise Error</parameter>
                    <parameter id="output_type" label="Output Type" menu="JSON,XML" required="false" tooltip="The output type to return from a successful call.">JSON</parameter>
                    <parameter id="xml" label="XML structure" menu="" required="true" tooltip="XML body to make the request.  Must be wrapped in a root element.">&lt;%=@results['Generate XML Body']['output']%&gt;</parameter>
                    <parameter id="action" label="Action" menu="" required="true" tooltip="The action to call in snake case. ex: get_notification_reports_op - Check wsdl for options.">one_step_notification_op</parameter>
                </parameters>
                <messages>
                    <message type="Create"/>
                    <message type="Update"/>
                    <message type="Complete"/>
                </messages>
                <dependents>
                    <task label="Successful" type="Complete" value="response = JSON.parse( @results['MIR3 Call: One Step Notification']['output'] )&#10;response['success'] == true">routine_onsolve_mir3_get_notification_reports_v1_15</task>
                    <task label="Unsuccessful" type="Complete" value="response = JSON.parse( @results['MIR3 Call: One Step Notification']['output'] )&#10;response['success'] != true">system_junction_v1_18</task>
                </dependents>
            </task>
            <task definition_id="utilities_echo_v1" id="utilities_echo_v1_12" name="Generate XML Body" x="9" y="101">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>true</visible>
                <parameters>
                    <parameter id="input" label="Input" menu="" required="true" tooltip="">&lt;%=
oncall = JSON.parse( @inputs['OnCall JSON'] || "{}")

require 'rexml/document'
str_xml = "&lt;oneStepNotification&gt;&lt;apiVersion&gt;4.14&lt;/apiVersion&gt;#{@inputs['Notification Detail']}&lt;/oneStepNotification&gt;"

doc = REXML::Document.new(str_xml)

mir3_unique_identifier = "username"
mir3_unique_identifier = @inputs['MIR3 Individual Recipient Field'] if !(!@inputs['MIR3 Individual Recipient Field'] || @inputs['MIR3 Individual Recipient Field'].empty? || @inputs['MIR3 Individual Recipient Field'].strip.empty?)
recipients_obj = JSON.parse(@inputs['Recipients JSON'])

## Find any placeholder that includes an 'additionalRecipients' placeholder tag and remove it from the call
#  these are either a bug in the 4.14 API, or not fully supported by the API.  
#  If the placeholder is sent in the call it is rejected by MIR3.
doc.elements.delete("//placeholders/placeholder[additionalRecipients]")

## add placeholders
# Create a "placeholderValues" element in the notification detail
placeholders = doc.root.insert_after( "//notificationDetail", REXML::Element.new("placeholderValues") ) 
placeholder_values = doc.elements['//placeholderValues']

# Loop over all placeholder values and insert a "placeholder" element within placeholders
#   with a "name" and "value" child element
JSON.parse(@inputs['Placeholder JSON'] || "[]").each {|ph|
  if (!ph['name'].nil? &amp;&amp; !ph['name'].empty? &amp;&amp; !ph['value'].nil? &amp;&amp; !ph['value'].empty?)
    ph_el = placeholder_values.add_element 'placeholder'
    ph_name = ph_el.add_element 'name'
    ph_name.text = "#{ph['name']}"
    ph_value = ph_el.add_element 'value'
    ph_value.text = "#{ph['value']}"
  end
}

## add recipients detail within one of the following (we need to determine which one by parsing the notification detail)
# if broadcastInfo
#    broadcastInfo/recipients/[recipient || recipientGroup || recipientSchedule] -- if recipient, also need unique identifier, such as employeeId
# if bulletinBoardInfo
#    &lt;same as for broadcastInfo&gt;
# if firstResponseInfo
#    escalations/escalation [there may be more than one]/[recipient || recipientGroup || recipientSchedule] -- if recipient, also need unique identifier, such as employeeId

notification_method = "broadcastInfo" if !doc.elements['//broadcastInfo'].nil?
notification_method = "bulletinBoardInfo" if !doc.elements['//bulletinBoardInfo'].nil?
notification_method = "firstResponseInfo" if !doc.elements['//firstResponseInfo'].nil?
notification_method = "calloutInfo" if !doc.elements['//calloutInfo'].nil?

case notification_method
when "broadcastInfo", "bulletinBoardInfo"
  # delete recipient element, and all other types
  #####  Not removing any existing entries at this time
  #doc.elements.delete("/#{notification_method}/recipients/recipient")
  #doc.elements.delete("/#{notification_method}/recipients/recipientGroup")
  #doc.elements.delete("/#{notification_method}/recipients/recipientSchedule")

  # add new recipient elements for each recipient
  recipients = doc.elements["//#{notification_method}/recipients"]

  # if recipients weren't included in the notification, add the 'recipients' element
  if recipients.nil?
    notification_method_el = doc.elements["//#{notification_method}"]
    recipients = notification_method_el.add_element 'recipients'
  end
  

  # Are there individual recipients
  individuals = []
  individuals = recipients_obj['individuals'].strip.split(",") if !(!recipients_obj['individuals'] || recipients_obj['individuals'].empty? || recipients_obj['individuals'].strip.empty?)
  # Add any oncall individuals from level 1.  We are only including level 1 
  # users by default in broadcast and bulletinBoardInfo method
  individuals + (oncall["1"] || [])

  # add new recipient child element(s) for individuals
  individuals.compact.each{|ind|
    recipient = recipients.add_element "recipient"
    recipient_identifier = recipient.add_element "#{mir3_unique_identifier}"
    recipient_identifier.text = ind.strip
  }

  # Are there groups recipients
  groups = []
  groups = recipients_obj['groups'].strip.split(",") if !(!recipients_obj['groups'] || recipients_obj['groups'].empty? || recipients_obj['groups'].strip.empty?)
  # add new recipient child element(s) for groups
  groups.compact.each{|grp|
    recipient = recipients.add_element "recipientGroup"
    recipient.text = grp.strip
  }

  # Are there schedule recipients
  schedules = []
  schedules = recipients_obj['schedules'].strip.split(",") if !(!recipients_obj['schedules'] || recipients_obj['schedules'].empty? || recipients_obj['schedules'].strip.empty?)
  # add new recipient child element(s) for schedules
  schedules.compact.each{|schedule|
    recipient = recipients.add_element "recipientSchedule"
    recipient.text = schedule.strip
  }

when "firstResponseInfo", "calloutInfo"
  ## Need help understanding if we replace existing values, or have to add various elements...
  #  Loop over the existing Recipient JSON escalation, [right now that's stored as an object].... For each level:
  #  If there are populated values
  #    See if the "escalation" elements exist for that level (and all previous levels exist.  If not, create them.
  #      How to deal with max Response Time -- both for levels that exist, and that don't?
  #    Append any recipients for that level -- individuals, groups, schedules
  #
  escalation_container = doc.elements["//#{notification_method}/escalations"]
  #existing_escalation_levels = doc.elements["//#{notification_method}/escalations/escalation"]
  #XPath.match( doc, "//name" ) 
  existing_escalation_levels = REXML::XPath.match( doc, "//#{notification_method}/escalations/escalation")
  
  # Find highest Escalation Level in Recipients JSON and OnCall list
  input_esc_levels = recipients_obj.keys.map{|key|
    Integer(key.gsub('Escalation Level ','')) rescue nil
  }
  input_esc_levels += ( oncall.keys.map{|key|
    Integer(key) rescue nil
  } )
  highest_esc_level = input_esc_levels.compact.max_by {|item|
    item
  }

  if !highest_esc_level.nil?
    highest_esc_level.times {|iterator|
      # Extract escalation level details for this iterator
      esc_level = recipients_obj["Escalation Level #{iterator + 1}"] || {}

      # set maxResponseTime using "3600" as default value.
      maxResponseTime = "3600"
      maxResponseTime = esc_level['maxResponse'] if !esc_level['maxResponse'].to_s.empty?

      if !existing_escalation_levels[iterator]
        #add escalation element
        escalation_element = escalation_container.add_element 'escalation'
        escalation_element_response_time_el = escalation_element.add_element 'maxResponseTime'
        escalation_element_response_time_el.text = maxResponseTime
      else
        #set escalation
        escalation_element = existing_escalation_levels[iterator]
      end

      # Are there any individual recipients
      individuals = []
      individuals = esc_level['individuals'].strip.split(",") if !(!esc_level || !esc_level['individuals'] || esc_level['individuals'].empty? || esc_level['individuals'].strip.empty?)
      # Add any oncall individuals for current level -- which is iterator + 1
      individuals += (oncall["#{iterator + 1}"] || [])
      # add new recipient child element(s) for individuals
      individuals.compact.each{|ind|
        recipient = escalation_element.add_element "recipient"
        recipient_identifier = recipient.add_element "#{mir3_unique_identifier}"
        recipient_identifier.text = ind.strip
      }

      # Are there groups recipients
      groups = []
      esc_level = recipients_obj["Escalation Level #{iterator + 1}"]
      groups = esc_level['groups'].strip.split(",") if !(!esc_level || !esc_level['groups'] || esc_level['groups'].empty? || esc_level['groups'].strip.empty?)
      # add new recipient child element(s) for groups
      groups.compact.each{|grp|
        recipient = escalation_element.add_element "recipientGroup"
        recipient.text = grp.strip
      }

      # Are there schedule recipients
      schedules = []
      esc_level = recipients_obj["Escalation Level #{iterator + 1}"]
      schedules = esc_level['schedules'].strip.split(",") if !(!esc_level || !esc_level['schedules'] || esc_level['schedules'].empty? || esc_level['schedules'].strip.empty?)
      # add new recipient child element(s) for schedules
      schedules.compact.each{|schedule|
        recipient = escalation_element.add_element "recipientSchedule"
        recipient.text = schedule.strip
      }
    }
  end

else
  raise "Cannot determine notification method (expected 'broadcast', 'bulletinBoardInfo', 'firstResponseInfo', or 'calloutInfo'"
end

output = "" 
doc.write(output)
#To pretty print, do this:
#doc.write(output, 2)

output
%&gt;</parameter>
                </parameters>
                <messages>
                    <message type="Create"/>
                    <message type="Update"/>
                    <message type="Complete"/>
                </messages>
                <dependents>
                    <task label="" type="Complete" value="">mir3_generic_call_v1_9</task>
                </dependents>
            </task>
            <task definition_id="routine_onsolve_mir3_get_notification_reports_v1" id="routine_onsolve_mir3_get_notification_reports_v1_15" name="Get Notification Report" x="165" y="219">
                <version>1</version>
                <configured>true</configured>
                <defers>true</defers>
                <deferrable>true</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter id="UUIDs JSON" label="UUIDs JSON" menu="" required="true" tooltip="A JSON object of open MIR3 Notification UUIDs">&lt;%=
response = JSON.parse(@results['MIR3 Call: One Step Notification']['output'])
[ response['one_step_notification_response']['notification_report_uuid'] ].to_json
%&gt;</parameter>
                </parameters>
                <messages>
                    <message type="Create"/>
                    <message type="Update"/>
                    <message type="Complete"/>
                </messages>
                <dependents>
                    <task label="" type="Complete" value="">system_junction_v1_18</task>
                </dependents>
            </task>
            <task definition_id="system_junction_v1" id="system_junction_v1_18" name="Junction" x="359" y="99">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters/>
                <messages>
                    <message type="Create"/>
                    <message type="Update"/>
                    <message type="Complete"/>
                </messages>
                <dependents>
                    <task label="" type="Complete" value="">utilities_echo_v1_4</task>
                </dependents>
            </task>
            <task definition_id="system_tree_return_v1" id="system_tree_return_v1_20" name="Return" x="719" y="99">
                <version>1</version>
                <configured>true</configured>
                <defers>false</defers>
                <deferrable>false</deferrable>
                <visible>false</visible>
                <parameters>
                    <parameter id="Success" label="Success" menu="" required="false" tooltip="'true' or 'false'">&lt;%=JSON.parse(@results['Parse or handle output']['output'])['Success']%&gt;</parameter>
                    <parameter id="Notification Report UUID" label="Notification Report UUID" menu="" required="false" tooltip="The UUID of the notification from MIR3">&lt;%=JSON.parse(@results['Parse or handle output']['output'])['Notification Report UUID']%&gt;</parameter>
                    <parameter id="Output" label="Output" menu="" required="false" tooltip="The output from the call - either the XML notificationDetail block, or the error message">&lt;%=JSON.parse(@results['Parse or handle output']['output'])['Full Output JSON'].to_json%&gt;</parameter>
                    <parameter id="Title" label="Title" menu="" required="false" tooltip="The notification title">&lt;%=
if @results.has_key?('Get Notification Report')
  notification_report_response = JSON.parse( @results['Get Notification Report']['Output'] )
  notification_report_successful = notification_report_response['success']

  if notification_report_successful
    notification_report_response['get_notification_reports_response']['notification_report']['title']
  end
end
%&gt;</parameter>
                    <parameter id="Additional JSON Output" label="Additional JSON Output" menu="" required="false" tooltip="Any additional output that coud be included in the future"/>
                </parameters>
                <messages>
                    <message type="Create"/>
                    <message type="Update"/>
                    <message type="Complete"/>
                </messages>
                <dependents/>
            </task>
        </request>
    </taskTree>
</tree>